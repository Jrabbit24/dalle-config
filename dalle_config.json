import tkinter as tk
from tkinter import ttk, messagebox
from googletrans import Translator
import json
import urllib.request
import webbrowser
import socket
import ssl
import os
import sys
import re
import random  # Import modul random untuk pemilihan enhancement acak

class DallePromptGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("DALL-E 3 Professional Prompt Generator")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        self.root.resizable(True, True)
        
        # Setup jaringan
        socket.setdefaulttimeout(15)
        ssl._create_default_https_context = ssl._create_unverified_context
        
        # Konfigurasi online
        self.config_url = "https://raw.githubusercontent.com/Jrabbit24/dalle-config/main/dalle_config.json"
        
        # Default values fallback
        self.default_config = {
            "languages": {"English": "en", "Indonesian": "id"},
            "compositions": ["Close-up", "Medium shot"],
            "lightings": ["Golden hour", "Neon lighting"],
            "styles": ["Cinematic", "3D rendering"],
            "focus_techniques": ["Shallow depth of field"],
            "effects": ["Film grain"],
            "brands": ["Converse", "Nike", "Adidas", "Levi's"],
            "location_enhancements": {
                "city": ["neon-lit", "bustling", "rainy"],
                "beach": ["sunny", "sandy", "tropical"],
                "forest": ["misty", "enchanted", "ancient"]
            },
            "lighting_enhancements": {
                "Golden hour": " with dramatic shadows",
                "Neon lighting": " reflecting on wet pavement",
                "Studio lighting": ", softbox illumination"
            }
        }
        
        # Setup bahasa UI
        self.ui_language = "id"
        self.load_ui_language()
        self.translator = Translator()
        self.current_config = self.default_config.copy()
        
        self.setup_ui()
        self.load_config()
    
    def resource_path(self, relative_path):
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)
    
    def load_ui_language(self):
        config_path = os.path.join(os.path.expanduser("~"), "dalle_prompt_config.json")
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                    self.ui_language = config.get("ui_language", "id")
        except Exception:
            pass
    
    def save_ui_language(self):
        config_path = os.path.join(os.path.expanduser("~"), "dalle_prompt_config.json")
        try:
            with open(config_path, 'w') as f:
                json.dump({"ui_language": self.ui_language}, f)
        except Exception:
            pass
    
    def load_config(self):
        try:
            headers = {'User-Agent': 'Mozilla/5.0'}
            req = urllib.request.Request(self.config_url, headers=headers)
            
            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    config = json.loads(response.read().decode())
                    self.current_config = config
                    messagebox.showinfo(
                        "Berhasil" if self.ui_language == "id" else "Success",
                        "Konfigurasi berhasil dimuat dari GitHub!" if self.ui_language == "id" 
                        else "Config loaded from GitHub!"
                    )
                else:
                    raise Exception(f"HTTP Status: {response.status}")
                    
        except Exception as e:
            print(f"Error loading config: {str(e)}")
            messagebox.showwarning(
                "Peringatan" if self.ui_language == "id" else "Warning",
                f"Tidak dapat memuat konfigurasi online:\n{str(e)}\n" +
                "Menggunakan konfigurasi default." if self.ui_language == "id"
                else f"Couldn't load online config:\n{str(e)}\nUsing default configuration."
            )
            self.current_config = self.default_config
        
        self.update_ui_with_config()
    
    def setup_ui(self):
        self.style = ttk.Style()
        self.style.configure("TFrame", background="#f0f5ff")
        self.style.configure("TLabel", background="#f0f5ff", font=('Segoe UI', 10))
        self.style.configure("TButton", font=('Segoe UI', 10), padding=5)
        self.style.configure("Header.TLabel", font=('Segoe UI', 16, 'bold'), foreground="#1a3d7c")
        self.style.configure("TCombobox", padding=3)
        self.style.configure("TEntry", padding=3)
        
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(0, weight=1)
        
        main_frame = ttk.Frame(self.root, padding=15)
        main_frame.grid(row=0, column=0, sticky="nsew")
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_rowconfigure(5, weight=1)
        
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        header_frame.grid_columnconfigure(0, weight=1)
        
        ttk.Label(header_frame, 
                 text="PEMBUAT PROMPT DALL-E 3 PROFESIONAL" if self.ui_language == "id" 
                 else "DALL-E 3 PROMPT GENERATOR",
                 style="Header.TLabel").grid(row=0, column=0, sticky="w")
        
        self.lang_btn = ttk.Button(
            header_frame,
            text="ID" if self.ui_language == "en" else "EN",
            width=3,
            command=self.toggle_language
        )
        self.lang_btn.grid(row=0, column=2, padx=5)
        
        ttk.Button(header_frame, 
                  text="🔄 Perbarui" if self.ui_language == "id" else "🔄 Update",
                  command=self.load_config).grid(row=0, column=1, sticky="e", padx=5)
        
        lang_frame = ttk.Frame(main_frame)
        lang_frame.grid(row=1, column=0, sticky="ew", pady=(0, 10))
        lang_frame.grid_columnconfigure(1, weight=1)
        
        ttk.Label(lang_frame, 
                 text="Bahasa Input:" if self.ui_language == "id" else "Input Language:"
                 ).grid(row=0, column=0, padx=(0, 10), sticky="w")
        
        self.lang_var = tk.StringVar()
        self.lang_combo = ttk.Combobox(lang_frame, textvariable=self.lang_var, 
                                      state="readonly", width=20)
        self.lang_combo.grid(row=0, column=1, sticky="ew")
        
        essential_frame = ttk.LabelFrame(
            main_frame, 
            text=" Elemen Penting " if self.ui_language == "id" else " Essential Elements ",
            padding=10
        )
        essential_frame.grid(row=2, column=0, sticky="ew", pady=5)
        essential_frame.grid_columnconfigure(1, weight=1)
        
        ttk.Label(essential_frame, 
                 text="Subjek Utama*:" if self.ui_language == "id" else "Main Subject*:"
                 ).grid(row=0, column=0, sticky="w", pady=3)
        self.subject_entry = ttk.Entry(essential_frame)
        self.subject_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=3)
        
        ttk.Label(essential_frame, 
                 text="Aksi/Narasi:" if self.ui_language == "id" else "Action/Narrative:"
                 ).grid(row=1, column=0, sticky="w", pady=3)
        self.action_entry = ttk.Entry(essential_frame)
        self.action_entry.grid(row=1, column=1, sticky="ew", padx=5, pady=3)
        
        ttk.Label(essential_frame, 
                 text="Lokasi/Konteks:" if self.ui_language == "id" else "Location/Context:"
                 ).grid(row=2, column=0, sticky="w", pady=3)
        self.location_entry = ttk.Entry(essential_frame)
        self.location_entry.grid(row=2, column=1, sticky="ew", padx=5, pady=3)
        
        ttk.Label(essential_frame, 
                 text="Atribut (warna, merek):" if self.ui_language == "id" else "Attributes (colors, brands):"
                 ).grid(row=3, column=0, sticky="w", pady=3)
        self.attributes_entry = ttk.Entry(essential_frame)
        self.attributes_entry.grid(row=3, column=1, sticky="ew", padx=5, pady=3)
        
        pro_frame = ttk.LabelFrame(
            main_frame, 
            text=" Opsi Profesional " if self.ui_language == "id" else " Professional Options ",
            padding=10
        )
        pro_frame.grid(row=3, column=0, sticky="ew", pady=5)
        pro_frame.grid_columnconfigure(1, weight=1)
        
        self.option_combos = {}
        options = [
            ("Komposisi:" if self.ui_language == "id" else "Composition:", "compositions"),
            ("Pencahayaan:" if self.ui_language == "id" else "Lighting:", "lightings"),
            ("Gaya:" if self.ui_language == "id" else "Style:", "styles"),
            ("Teknik Fokus:" if self.ui_language == "id" else "Focus Technique:", "focus_techniques"),
            ("Efek:" if self.ui_language == "id" else "Effects:", "effects")
        ]
        
        for i, (label, config_key) in enumerate(options):
            ttk.Label(pro_frame, text=label).grid(row=i, column=0, sticky="w", pady=3, padx=(0, 10))
            combo = ttk.Combobox(pro_frame, state="readonly")
            combo.grid(row=i, column=1, sticky="ew", pady=3)
            self.option_combos[config_key] = combo
        
        era_frame = ttk.Frame(pro_frame)
        era_frame.grid(row=len(options), column=0, columnspan=2, sticky="w", pady=5)
        ttk.Label(era_frame, 
                 text="Era:" if self.ui_language == "id" else "Era:").grid(row=0, column=0, sticky="w")
        
        self.era_var = tk.StringVar()
        era_combo = ttk.Combobox(era_frame, textvariable=self.era_var, 
                                values=["1980s", "1990s", "Retro", "Futuristic"], 
                                width=15, state="readonly")
        era_combo.grid(row=0, column=1, padx=5)
        self.era_var.set("")
        
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=4, column=0, pady=10)
        
        ttk.Button(btn_frame, 
                  text="✨ Buat Prompt" if self.ui_language == "id" else "✨ Generate Prompt", 
                  command=self.generate_prompt).grid(row=0, column=0, padx=10)
        ttk.Button(btn_frame, 
                  text="🧹 Bersihkan" if self.ui_language == "id" else "🧹 Clear All", 
                  command=self.clear_fields).grid(row=0, column=1, padx=10)
        
        result_frame = ttk.LabelFrame(
            main_frame, 
            text=" Prompt Hasil " if self.ui_language == "id" else " Generated Prompt ",
            padding=10
        )
        result_frame.grid(row=5, column=0, sticky="nsew", pady=(5, 0))
        result_frame.grid_columnconfigure(0, weight=1)
        result_frame.grid_rowconfigure(0, weight=1)
        
        scrollbar = ttk.Scrollbar(result_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.result_text = tk.Text(result_frame, height=8, wrap=tk.WORD, 
                                 font=('Consolas', 11), padx=10, pady=10,
                                 yscrollcommand=scrollbar.set)
        self.result_text.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.result_text.yview)
        
        self.optimized_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(result_frame, 
                       text="Optimalkan untuk DALL-E 3" if self.ui_language == "id" else "Optimize for DALL-E 3",
                       variable=self.optimized_var,
                       onvalue=True, offvalue=False).pack(anchor=tk.W, pady=(10, 0))
        
        footer_frame = ttk.Frame(main_frame)
        footer_frame.grid(row=6, column=0, sticky="ew", pady=(10, 0))
        footer_frame.grid_columnconfigure(0, weight=1)
        
        ttk.Button(footer_frame, 
                  text="📋 Salin" if self.ui_language == "id" else "📋 Copy", 
                  command=self.copy_to_clipboard).grid(row=0, column=0, sticky="w")
        ttk.Button(footer_frame, 
                  text="⚙️ Edit Online" if self.ui_language == "id" else "⚙️ Edit Online", 
                  command=self.edit_config_online).grid(row=0, column=1, sticky="e")
    
    def toggle_language(self):
        self.ui_language = "en" if self.ui_language == "id" else "id"
        self.save_ui_language()
        self.lang_btn.configure(text="ID" if self.ui_language == "en" else "EN")
        self.root.destroy()
        root = tk.Tk()
        app = DallePromptGenerator(root)
        root.mainloop()
    
    def update_ui_with_config(self):
        self.lang_combo['values'] = list(self.current_config["languages"].keys())
        self.lang_combo.set("English")
        
        for config_key, combo in self.option_combos.items():
            combo['values'] = self.current_config.get(config_key, [])
            if combo['values']:
                combo.current(0)
    
    def generate_prompt(self):
        try:
            subject = self.subject_entry.get().strip()
            if not subject:
                messagebox.showwarning(
                    "Peringatan" if self.ui_language == "id" else "Warning",
                    "Subjek utama diperlukan!" if self.ui_language == "id" 
                    else "Main Subject is required!"
                )
                return
                
            action = self.action_entry.get().strip()
            location = self.location_entry.get().strip()
            attributes = self.attributes_entry.get().strip()
            
            lang = self.current_config["languages"].get(self.lang_var.get(), "en")
            
            if lang != "en":
                subject = self.translate_text(subject, lang)
                action = self.translate_text(action, lang)
                location = self.translate_text(location, lang)
                attributes = self.translate_text(attributes, lang)
            
            prompt_parts = []
            
            composition = self.option_combos["compositions"].get()
            if composition:
                prompt_parts.append(f"{composition} of")
            
            if self.optimized_var.get():
                subject = self.optimize_subject(subject)
                attributes = self.optimize_attributes(attributes)
                action = self.optimize_action(action)
                location = self.optimize_location(location)
            
            prompt_parts.append(f"a {subject}")
            
            if attributes:
                prompt_parts.append(f"wearing {attributes}")
            
            if action:
                prompt_parts.append(action)
            
            if location:
                prompt_parts.append(f"in {location}")
            
            era = self.era_var.get()
            if era:
                prompt_parts.append(f", {era} retro urban atmosphere")
            
            tech_specs = []
            
            lighting = self.option_combos["lightings"].get()
            if lighting:
                # Tambahkan enhancement untuk lighting jika ada
                lighting += self.get_lighting_enhancement(lighting)
                tech_specs.append(f"{lighting.lower()} lighting")
                
            focus = self.option_combos["focus_techniques"].get()
            if focus:
                tech_specs.append(focus.lower())
                
            effects = self.option_combos["effects"].get()
            if effects:
                tech_specs.append(f"{effects.lower()} effect")
                
            style = self.option_combos["styles"].get()
            if style:
                tech_specs.append(f"{style.lower()} style")
            
            if tech_specs:
                prompt_parts.append(", " + ", ".join(tech_specs))
            
            full_prompt = " ".join(prompt_parts).capitalize() + "."
            
            if self.optimized_var.get():
                full_prompt = self.clean_prompt(full_prompt)
            
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, full_prompt)
            
        except Exception as e:
            messagebox.showerror(
                "Error" if self.ui_language == "id" else "Error",
                f"Gagal membuat prompt:\n{str(e)}" if self.ui_language == "id"
                else f"Failed to generate prompt:\n{str(e)}"
            )
    
    def optimize_subject(self, subject):
        subject = re.sub(r'(\d+)(th|nd|rd|st)\b', r'\1-year-old', subject)
        subject = re.sub(r'\ba\s+a\b', 'a', subject, flags=re.IGNORECASE)
        return subject
    
    def optimize_attributes(self, attributes):
        if 'brands' in self.current_config:
            for brand in self.current_config['brands']:
                attributes = re.sub(r'\b' + re.escape(brand.lower()) + r'\b', brand, attributes, flags=re.IGNORECASE)
        return attributes
    
    def optimize_action(self, action):
        if not action.endswith('ing'):
            action = re.sub(r'\b(\w+)\b', r'\1ing', action, count=1)
        return action
    
    def optimize_location(self, location):
        # Gunakan enhancement dari config jika ada
        if 'location_enhancements' in self.current_config:
            enhancements = self.current_config['location_enhancements']
            for keyword, options in enhancements.items():
                if keyword in location.lower():
                    # Pilih secara acak salah satu enhancement
                    enhancement = random.choice(options)
                    location = f"{enhancement} {location}"
                    break
        return location
    
    def get_lighting_enhancement(self, lighting):
        # Ambil enhancement dari config jika ada
        if 'lighting_enhancements' in self.current_config:
            return self.current_config['lighting_enhancements'].get(lighting, '')
        return ''
    
    def clean_prompt(self, prompt):
        prompt = re.sub(r'\s+', ' ', prompt)
        prompt = re.sub(r'\s([,\.])', r'\1', prompt)
        prompt = prompt.rstrip('.') + '.'
        prompt = prompt.capitalize()
        prompt = re.sub(r'\ba\s+a\b', 'a', prompt, flags=re.IGNORECASE)
        return prompt
    
    def translate_text(self, text, src_lang):
        try:
            if not text.strip():
                return ""
            translated = self.translator.translate(text, src=src_lang, dest='en')
            return translated.text
        except Exception:
            return text
    
    def clear_fields(self):
        self.subject_entry.delete(0, tk.END)
        self.action_entry.delete(0, tk.END)
        self.location_entry.delete(0, tk.END)
        self.attributes_entry.delete(0, tk.END)
        
        for combo in self.option_combos.values():
            combo.set('')
            
        self.era_var.set('')
        self.result_text.delete(1.0, tk.END)
    
    def copy_to_clipboard(self):
        prompt = self.result_text.get(1.0, tk.END).strip()
        if prompt:
            self.root.clipboard_clear()
            self.root.clipboard_append(prompt)
            messagebox.showinfo(
                "Berhasil" if self.ui_language == "id" else "Success",
                "Prompt disalin ke clipboard!" if self.ui_language == "id"
                else "Prompt copied to clipboard!"
            )
        else:
            messagebox.showwarning(
                "Peringatan" if self.ui_language == "id" else "Warning",
                "Tidak ada prompt untuk disalin" if self.ui_language == "id"
                else "No prompt to copy"
            )
    
    def edit_config_online(self):
        webbrowser.open("https://github.com/Jrabbit24/dalle-config/edit/main/dalle_config.json")

if __name__ == "__main__":
    root = tk.Tk()
    app = DallePromptGenerator(root)
    root.mainloop()
